=Snowflake=

==Materialized Tables==
current data strat: 1 big stream one giant pipe, about 30 min delay, most delay comes from firehose and snowflake limitations, one monotable, events_v1, giant table, ae then clean and enrich & datamart inside of snowflake. 1hr to 1hr45m latency from raw to enriched.

intended improvements: pre-process data in aws. clean on aws side. one pipe -> many pipes (one per api). switch to snowpipe streaming to save costs. 15 - 30 sec to cleaned state.

where does materialized tables fit in?

use cases:

how to save on current workloads:

what are materialized tables?
    * Min lag target is one minute
    * essentially materialized views w/ a slight lag time?
    * snowflake orchestrates and optimizes queries

what are its limitations?
    * built for aggregations
    * can do filters, projections, joins (inner for now), aggregations.
    * can use some simple window functions
    * some window functions won't work

dbt has over 1000 models currently.

how does datahub determine data lineage?
    * it remains a mystery for now
    * if any tools work with views, they should work with materialized tables as well

Lineage and Observability
    * plan to offer a dbt like graph to visualize what happens with materialized tables

Goal is to keep data engineering from being the data catalogue

Action Items:
    * Get out data processing out of snowflake!
    * How much does it cost kafka to do all this stuff

Do we use clustering?
    * currently not
    * most of our data is time based
    * we do have one where we do a merge instead of an insert in one of our tables
    * materialized tables does intend to support reclustering
    * currently materialized views do not work well with reclustering

Can we still use dbt to interact with materialized tables?
    * ideally
    * dbt should be building a native connector for materialized tables

Materialized Tables can Cost
    * plan to use automatic backfills
    * errors first then backfills
    * having an error only flag would be nice
    * backfills = expensive

Storage Costs have been prohibitive

Will snowflake use materialized views internally?
    * eventually, 5-10 internal use cases so far

Materialized tables will be sharable

Will they be secure?
    * not in private preview
    * should be as secure as other shared resources

Materialized tables trade latency for performance

